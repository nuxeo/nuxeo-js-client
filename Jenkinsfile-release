/*
 * (C) Copyright 2017 Nuxeo (http://nuxeo.com/) and others.
 *
 * Contributors:
 *     Thomas Roger <troger@nuxeo.com>
 */

node('SLAVE') {
    try {
        timestamps {
            timeout(30) {
                stage('checkout') {
                    checkout scm
                    // Make sure the master branch is clean
                    sh "git update-ref refs/heads/master origin/master"
                }

                def branch = sh script: 'git show -s --pretty=format:"%D" | sed "s,.*\\(release/[^,]*\\).*,\\1,"', returnStdout: true
                if (!(branch =~ /release\/\d+.\d+.\d+/)) {
                    error "Branch ${branch} does not match a release branch format"
                }
                def releaseVersion = branch.replaceAll(/release\//, '')
                stage ('release') {
                    def envVars = [ 'npm_config_registry=' ]
                    withEnv(envVars) {
                        sh "npm run release -- ${releaseVersion}"
                        currentBuild.description = "Release ${releaseVersion}"
                    }
                }

                stage ('cdn publication') {
                    def mvnHome = tool name: 'maven-3.3', type: 'hudson.tasks.Maven$MavenInstallation'
                    sh """
                        ${mvnHome}/bin/mvn deploy:deploy-file \
                        -DgroupId=org.nuxeo.js \
                        -DartifactId=nuxeo \
                        -Dversion=${releaseVersion} \
                        -DrepositoryId=public-releases \
                        -Durl=https://mavenin.nuxeo.com/nexus/content/repositories/public-releases
                    """
                    sh "scp dist/nuxeo.js nuxeo@lethe.nuxeo.com:/opt/www/community.nuxeo.com/static/releases/nuxeo.js/nuxeo-${releaseVersion}.js"
                }

                stage ('post build') {
                    // Clean up release branch
                    sh 'git checkout master'
                    sh "git push origin --delete ${branch}"
                    archive 'dist/**'
                    emailext (recipientProviders: [[$class: 'RequesterRecipientProvider']],
                        subject: "${env.JOB_NAME} (${env.BUILD_NUMBER}) - Success!",
                        body: "Build success ${env.BUILD_URL}")
                }
            }
        }
    } catch(e) {
        currentBuild.result = "FAILURE"
        step([$class: 'ClaimPublisher'])
        archive 'dist/**'
        emailext (recipientProviders: [[$class: 'RequesterRecipientProvider']],
            subject: "${env.JOB_NAME} (${env.BUILD_NUMBER}) - Failure!",
            body: "Build failed ${env.BUILD_URL}")
        throw e
    }
}
